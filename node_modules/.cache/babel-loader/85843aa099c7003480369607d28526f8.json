{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vikra\\\\OneDrive\\\\Desktop\\\\SF Projects\\\\contracts-ui\\\\src\\\\components\\\\TextWithMarks.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TextWithMarks({\n  node\n}) {\n  const {\n    text,\n    bold,\n    italic,\n    underline,\n    children,\n    type\n  } = node;\n  if (type === 'mention') {\n    return children.map((child, i) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: child.text\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 39\n    }, this));\n  }\n  let content = text || children && children.map((child, i) => /*#__PURE__*/_jsxDEV(TextWithMarks, {\n    node: child\n  }, i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 65\n  }, this));\n  if (bold) content = /*#__PURE__*/_jsxDEV(\"strong\", {\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 23\n  }, this);\n  if (italic) content = /*#__PURE__*/_jsxDEV(\"em\", {\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 25\n  }, this);\n  if (underline) content = /*#__PURE__*/_jsxDEV(\"u\", {\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 28\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: content\n  }, void 0, false);\n}\n_c = TextWithMarks;\nvar _c;\n$RefreshReg$(_c, \"TextWithMarks\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","TextWithMarks","node","text","bold","italic","underline","children","type","map","child","i","fileName","_jsxFileName","lineNumber","columnNumber","content","_c","$RefreshReg$"],"sources":["C:/Users/vikra/OneDrive/Desktop/SF Projects/contracts-ui/src/components/TextWithMarks.js"],"sourcesContent":["import React from 'react'\r\n\r\nexport default function TextWithMarks({ node }) {\r\n  const { text, bold, italic, underline, children, type } = node\r\n  if (type === 'mention') {\r\n    return children.map((child, i) => <React.Fragment key={i}>{child.text}</React.Fragment>)\r\n  }\r\n  let content = text || (children && children.map((child, i) => <TextWithMarks key={i} node={child} />))\r\n  if (bold) content = <strong>{content}</strong>\r\n  if (italic) content = <em>{content}</em>\r\n  if (underline) content = <u>{content}</u>\r\n  return <>{content}</>\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzB,eAAe,SAASC,aAAaA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAC9C,MAAM;IAAEC,IAAI;IAAEC,IAAI;IAAEC,MAAM;IAAEC,SAAS;IAAEC,QAAQ;IAAEC;EAAK,CAAC,GAAGN,IAAI;EAC9D,IAAIM,IAAI,KAAK,SAAS,EAAE;IACtB,OAAOD,QAAQ,CAACE,GAAG,CAAC,CAACC,KAAK,EAAEC,CAAC,kBAAKb,OAAA,CAACF,KAAK,CAACG,QAAQ;MAAAQ,QAAA,EAAUG,KAAK,CAACP;IAAI,GAAdQ,CAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA8B,CAAC,CAAC;EAC1F;EACA,IAAIC,OAAO,GAAGb,IAAI,IAAKI,QAAQ,IAAIA,QAAQ,CAACE,GAAG,CAAC,CAACC,KAAK,EAAEC,CAAC,kBAAKb,OAAA,CAACG,aAAa;IAASC,IAAI,EAAEQ;EAAM,GAAfC,CAAC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAgB,CAAC,CAAE;EACtG,IAAIX,IAAI,EAAEY,OAAO,gBAAGlB,OAAA;IAAAS,QAAA,EAASS;EAAO;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;EAC9C,IAAIV,MAAM,EAAEW,OAAO,gBAAGlB,OAAA;IAAAS,QAAA,EAAKS;EAAO;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACxC,IAAIT,SAAS,EAAEU,OAAO,gBAAGlB,OAAA;IAAAS,QAAA,EAAIS;EAAO;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EACzC,oBAAOjB,OAAA,CAAAE,SAAA;IAAAO,QAAA,EAAGS;EAAO,gBAAG,CAAC;AACvB;AAACC,EAAA,GAVuBhB,aAAa;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}